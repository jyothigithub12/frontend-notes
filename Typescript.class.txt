React-2503 - Agenda 

Typescript - Programming Language - Superset of Javascript (which means it going to have all the features of javascript and along with that it has its own features. )

Tailwind CSS - CSS Library

ES6 & ES7 (ECMA Script)

React Js + Vite Js
React Js + Next Js

>TypeScript is abbreviated as TS .

> It's a free and open source programming language developed by Microsoft.

> It adds static typing to Javascript.

> It is designed to develop large scale appplications and transpiles the source code to Javascript.

Typings:

1. Static Typing: Assigning the data type to the variable during variable creation time.
    Eg. Java, Go, Typescript, C, C++ etc...

2. Dynamic Typing: Assigning the data type to the variable during execution time.
    Eg. Javascript, Python etc...

Transpilation: Converting the source code from one programming language to another.

    Eg. Typescript(we are going to write thr souce code in the typescript but browser doesnot understand the typescript language so for browser compartibility we are converting from typescript to javascript.)

    > for developer perspective writing code in typescript and for browser compartibility converting to javascript.

compilation:converting source code from  high level language to low level language which is byte code.

> For executing the source code of TypeScript.

    1. Transpilation: Converts the source code from Typescript to Javascript. Also if there are any syntax errors it shows to us.
          
            tsc filename.ts

    2. Execution Phase: Typescript Complier takes source code as an input, execute it and shows output to the user.
           
            node filename.js

> usually TypeScript has Transpilation and Execution phase to execute the typescript source code . (usually programming language has two phase execution.)

> whereas javascript has only direct Execution phase to execute the javascript source code.(where as scripting languages or interpreted language follow line  by line execution of source code.)

> TypeScript may be used to develop JavaScript applications for both client-side(reactjs) and server-side execution(nodejs,express js and mongo db) (as with Node.js).
    
    TypeScript Compiler  tsc (default compiler for TypeScript).

> TypeScript introduced in 1st october 2012 by Microsoft.

> Latest version of TypeScript:
    
    v5.8.2

> File extension for TypeScript:

    .ts - Typescript
    .tsx - TypeScript + XML (Extensible Markup Language) It supports writing html source code in typescript file.

> File extension for TypeScript:

    .js -JavaScript 
    .jsx -Javascript + XML (Extensible Markup Language)It supports writing html source code in javascript file.

Note: For developer compartibility we are writing the source code in typescript.

    For browser compartibility we are converting the source code from TypeScript to JavaScript.


npm (node package manager): It manages all the packages which are available in node js(nodejs has javascript browser internally).

    To install all the packages which are available in package.json

        npm install

    To install a package globally, includes it should be available across the machine(laptop which is accesible in all the folders).
       
        npm install -global package-name
    
    To install a package:

        npm install package-name

    To uninstall a package:

        npm uninstall package-name

> To install typescript across the machine(laptop which is accesible in all the folders).

    npm install -global typescript

 
> To verify typescript installation:

    tsc -version


  >every Library or framework will come in the form of package.(like react,next js ,bootstarp etc.. this all will come as a package)


Static Typing:

    var variableName: dataType = value;

        Predefined data types - Number, Boolean or String
        Userdefined data types - Array, Object.(function also we can use but direct we cannot assign as a dataType.)

Interface: It defines the shape of the object, and it defines the   datatype of value.,(it can be used for object and class.)

    Syntax:
        interface InterfaceName {
            property1: value1;
            property2: value2;

            propertyN: valueN;
        }

InterfaceName should be pascal Case.

ES Linter(ECMA Script Linter will monitor the source code and identifies the errors.)

TASK1:

work on static typing create as many variables as possible,create different types of variables array of objects,string,number,Boolean and try to create interface and display object inside that and assign multiple data types to it.


02/04/2025:

Class: Collection of objects.

> It's a prototype to create objects.
    
    Syntax:
        class ClassName {
            constructor() {
                //initializing the parameters during object creation.
            }
            method1(): returnType {
                return value;
            }
            method1(): returnType {
                return value;
            }
        }

Restaurant Ordering System

    //here menu is parameter having object with key and value pairs.

    menu - {
        "Pizza": 300,
        "Burger": 250,
        "Coke": 50,
        "Pasta": 350
    }

    displayMenu()
    takeOrder()
    calculateBill()
    printBill()

    
    
    
    import * as readline from "readline"

    >> readline is a predefined package using this readline we get the data from the terminal(means we can enter the value in the terminal and we can read that value.)

    >> in order to read the value we need to create interface first.

            >>basically interface will accept two parameters.

            1.input:process.stdin,(stdin means system in(which means entering data from terminal to programme)).

            2.output:process.stdout(stdout means system out (which means getting data from programme to terminal)).

            syntax:

                const rl = readline.createInterface({
                    input:process.stdin,
                    output:process.stdout,
                });


    to enter the questions in the terminal:

            rl.question("Enter Your Name:", (item)=>{
                console.log(item);
                const restaurant1 = new RestaurantOrderingSystem();

                rl.close();
            })

        >>whatever the value we entered that will be come in the form of call back function.inside the call back function we can write the logic.

        For Setting readline package:

            Installation:
                 
                 npm install --save-dev @types/node       (readline package is a part on node js)

                 import * as readline from "readline";   (here import is used for importing from one package to another package followed by (as )aliasname , (*)indicates everything ).

                 syntax:

                const rl = readline.createInterface({
                    input:process.stdin,
                    output:process.stdout,
                });

               >> above we are creating an object and storing in rl variable.

               >> to get the data:

                rl.question('Question', function(value){

                });

                rl.question("Enter Your Name:", (item)=>{
                console.log(item);
                const restaurant1 = new RestaurantOrderingSystem();

                rl.close();
            })


        question is a predefined function expecting two parameter(Question(which we want to enter) and function(value) call back function and logic inside it.)


npm install  @types/node  (once you install this then it is going to download node_modules folder) --node_modules.

>>to keep track of all packages we download it will be maintained package.json (inside this package.json it is going to store package name and version.)

>> package-lock.json - it is meant for storing package names,versions along with dependencies.


03/04/2025:

Inheritance: Inheriting the properties and methods of parent class to child class.
   
    Syntax:

        // Parent Class

        class ClassName1 {
            variableName: datatype = value; // Property
            variableName: datatype = value; // Property
        }

        // Child Class (it has prevailages of parents class and it has its own prevailages own methods and own functions.)

        class ClassName2 extends ClassName1 {
        }

        extends predefined keyword - For extending properties and methods of ClassName1 to ClassName2.

        > Object should be created only for child class.


Arrow Function:

    >>Normal function Syntax:

            arrayName.forEach(function() {
            });

    >>Arrow function Syntax: 

            arrayName.forEach(() => {
            });


Polymorphism: Many Forms

1. Method Overriding (Runtime Polymorphism (while excueting the source code)): Having same method and same parameters in parent class and child class. - Inheritance

2. Method Overloading (Compile-time Polymorphism (while compiling the source code)): Having a same  method with different data types of a parameter or different parameters inside the class.

04/04/2025:

Interface: Interfaces are a powerful feature that allows developers to define the structure of objects.(interface is nothing but custome datatype.)

    Syntax:

        interface InterfaceName {
            properties
            methods declarations
        }
        class ClassName implements InterfaceName {    //interface is used for classes.
       
        }

        >>InterfaceName Should be pascalCase.(staring from first word first letter capital.)

Union: Using union we can include multiple data types to a variable.

    Syntax:
    variable: dataType; (its a general Syntax for assigning variable)

    union Syntax:

    variableName: dataType1 | dataType2 | dataType3;
    usernames: string | Array<string>; (here for user we can pass direct string or array of string).

    id: number | string;
 
Abstract refers to the process of simplifying complex systems or concepts by focusing on 
essential features and hiding unnecessary details, making them easier to understand and manage.

Abstract Classes: it is mainly used for inheritance.(we can declare the method in the parent class and can be used for child class.)

I
    Syntax:

        abstract class ClassName { //abstract is a predefined keyword.
            // Abstract(abstraction indicates declarations) and Non abstract methods(non abstract methods indicates implementations.)
            abstract methodName(param: datatype): returntype;
            methodName(param: datatype): returntype {
                
            }
        }
        class ClassName2 extends ClassName {
        }


        >>in Interface method implementations doesnot work.it can have only method declarations that why interface will have 100% abstraction.

        >> but abstract classes doesnot have 100% abstraction because it has both implementations and declarations.

        >> when we use abstract classes interface doesnot come into picture.

        >>abstraction can be achieved using interface(100% abstraction) and Abstract classes(we can achive 0-100% abstraction).